{"version":3,"sources":["Components/TableContent.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","overflowX","marginTop","margin","table","minWidth","spacing","TableContent","classes","React","useState","dataBase","setDataBase","useEffect","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","collection","get","then","clothes","c","forEach","cloth","push","Paper","className","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","key","data","id","console","log","style","height","width","src","image","alt","name","aling","trash","points","textAlign","Fab","size","color","onClick","item","doc","update","total_points","colSpan","rowSpan","bar","padding","backgroundColor","App","AppBar","position","Toolbar","variant","Typography","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7e45bf48.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Fab,\n  Table,\n  Paper,\n  TableHead,\n  TableBody,\n  TableCell,\n  TableRow,\n  makeStyles\n} from '@material-ui/core';\nimport * as firebase from \"firebase/app\";\nimport 'firebase/firestore';\n\nimport AddIcon from '@material-ui/icons/Add';\nimport RemoveIcon from '@material-ui/icons/Remove';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    overflowX: 'auto',\n    marginTop: 100,\n    margin: 40,\n  },\n  table: {\n    minWidth: 100,\n  },\n  margin: {\n    margin: theme.spacing(1),\n  },\n}));\n\n\nexport default function TableContent() {\n  const classes = useStyles();\n  const [dataBase, setDataBase] = React.useState([]);\n\n  React.useEffect(() => {\n\n    const firebaseConfig = {\n      apiKey: \"AIzaSyDRNwCTxL4SY0SURTapYQNP49ajIHNOL5g\",\n      authDomain: \"clothes-point.firebaseapp.com\",\n      databaseURL: \"https://clothes-point.firebaseio.com\",\n      projectId: \"clothes-point\",\n      storageBucket: \"clothes-point.appspot.com\",\n      messagingSenderId: \"560717171334\",\n      appId: \"1:560717171334:web:697efbdd441932980cdf07\",\n      measurementId: \"G-M0030HXHXD\"\n    };\n\n    firebase.initializeApp(firebaseConfig);\n\n    const db = firebase.firestore();\n\n    db.collection('clothes').get()\n      .then(clothes => {\n        const c = [];\n        clothes.forEach(cloth => {\n          c.push(cloth)\n        })\n        setDataBase(c)\n      })\n  }, [])\n\n  const removeItem = (id, item) => {\n    if (item.trash === 0) return;\n    firebase.firestore().collection('clothes').doc(id).update({\n      \"trash\": item.trash - 1,\n      \"total_points\": ((item.trash -1) * item.points) / 10\n    })\n  }\n\n  const addItem = (id, item) => {\n    firebase.firestore().collection('clothes').doc(id).update({\n      \"trash\": item.trash + 1,\n      \"total_points\": ((item.trash +1) * item.points) / 10\n    })\n  }\n\n  return (\n    <Paper className={classes.root}>\n      <Table className={classes.table} aria-label='simple table'>\n        <TableHead>\n          <TableRow>\n            <TableCell></TableCell>\n            <TableCell align=\"inherit\">Cloth</TableCell>\n            <TableCell align=\"inherit\">Trash</TableCell>\n            <TableCell align=\"inherit\">Points</TableCell>\n            <TableCell align=\"center\">Remove / Add</TableCell>\n            <TableCell align=\"left\">â‚¬</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {dataBase.map(cloth => (\n            <TableRow key={cloth.data().id}>\n            {console.log(cloth.data().id)}\n              <TableCell>\n                <img\n                  style={{ height: 70, width: 70 }}\n                  src={cloth.image}\n                  alt={cloth.name}\n                />\n              </TableCell>\n              <TableCell align=\"inherit\">{cloth.data().name}</TableCell>\n              <TableCell aling=\"inherit\">&nbsp;{cloth.data().trash}</TableCell>\n              <TableCell aling=\"inherit\">&nbsp;{cloth.data().points}</TableCell>\n\n              <TableCell style={{ textAlign: 'center', width: '50%' }}>\n                <Fab size=\"small\" color=\"primary\" aria-label=\"add\"\n                  className={classes.margin} onClick={() => { removeItem(cloth.id, cloth.data()) }}>\n                  <RemoveIcon />\n                </Fab>\n                <Fab size=\"small\" color=\"primary\" aria-label=\"add\"\n                  className={classes.margin} onClick={() => { addItem(cloth.id, cloth.data()) }}>\n                  <AddIcon />\n                </Fab>\n              </TableCell>\n              <TableCell aling=\"left\">{cloth.data().total_points}</TableCell>\n            </TableRow>\n          ))}\n          <TableRow>\n            <TableCell></TableCell>\n            <TableCell></TableCell>\n            <TableCell></TableCell>\n            <TableCell align=\"right\" colSpan={0}>My Wallet</TableCell>\n            <TableCell rowSpan={1} />\n            <TableCell align=\"left\">{}</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n    </Paper>\n  );\n}","import React from 'react';\nimport TableContent from './Components/TableContent';\nimport { Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\n\n\n\nconst useStyles = makeStyles(theme => ({\n  bar: {\n    padding: 10,\n    backgroundColor: '#000',\n  }\n}));\n\n\nfunction App() {\n  const classes = useStyles();\n  return (\n    <div>\n      <AppBar position=\"fixed\" className={classes.bar}>\n        <Toolbar variant=\"dense\">\n          <Typography variant='h5' component='h2'>\n            For every 10 clothes less, a new one!!!&nbsp;\n          <Typography component='p' >\n            This can be a catastrophe and you know it \n          </Typography>\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <TableContent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport App from './App';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}